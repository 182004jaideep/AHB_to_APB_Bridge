`timescale 1ns / 1ps

//==============================================================================
// AHB TO APB BRIDGE - APB CONTROLLER MODULE
//==============================================================================
// This module implements the APB master controller in an AHB-to-APB bridge.
// It receives processed AHB transaction information from the AHB slave module
// and converts it into proper APB protocol transactions.
//
// Key Features:
// - 8-state FSM following ARM AMBA AHB-APB Bridge specification
// - Handles both pipelined and non-pipelined AHB transfers
// - Supports read and write operations with proper APB timing
// - Pipeline handling for back-to-back AHB transactions
// - Proper APB setup and enable phase generation
//
// APB Protocol Reminder:
// - Setup Phase: PSEL=1, PENABLE=0 (address/control setup)
// - Enable Phase: PSEL=1, PENABLE=1 (data transfer occurs)
//==============================================================================

module APB_controller(
    //--------------------------------------------------------------------------
    // CLOCK AND RESET
    //--------------------------------------------------------------------------
    input wire        Hclk,           // System clock - same as AHB clock
    input wire        Hresetn,        // Active-low asynchronous reset
    
    //--------------------------------------------------------------------------
    // CONTROL INPUTS FROM AHB SLAVE MODULE
    //--------------------------------------------------------------------------
    input         valid,          // HIGH when valid AHB transfer detected
                                     // Triggers APB transaction start
    
    //--------------------------------------------------------------------------
    // CURRENT AHB TRANSACTION INPUTS (Real-time from AHB bus)
    //--------------------------------------------------------------------------
    input         Hwrite,         // Current AHB write control (real-time)
    input  [31:0] Haddr,          // Current AHB address (real-time)
    input  [31:0] Hwdata,         // Current AHB write data (real-time)
    
    //--------------------------------------------------------------------------
    // PIPELINED AHB TRANSACTION INPUTS (From AHB slave pipeline registers)
    //--------------------------------------------------------------------------
    input         Hwritereg,      // Pipelined write control (stage 1)
    input  [31:0] Haddr1,         // Pipelined address (stage 1)
    input  [31:0] Haddr2,         // Pipelined address (stage 2)
    input  [31:0] Hwdata1,        // Pipelined write data (stage 1)
    input  [31:0] Hwdata2,        // Pipelined write data (stage 2)
    
    //--------------------------------------------------------------------------
    // PERIPHERAL SELECTION INPUT
    //--------------------------------------------------------------------------
    input   [2:0]  tempselx,       // One-hot peripheral select from address decoder
                                     // Bit 0: Peripheral 1, Bit 1: Peripheral 2, Bit 2: Peripheral 3
    
    //--------------------------------------------------------------------------
    // APB PROTOCOL OUTPUT SIGNALS
    //--------------------------------------------------------------------------
    output reg        pwrite,         // APB write enable: 1=write, 0=read
    output reg        penable,        // APB enable: 0=setup phase, 1=enable phase
    output reg [2:0]  pselx,          // APB peripheral select (one-hot encoding)
    output reg [31:0] pwdata,         // APB write data to selected peripheral
    output reg [31:0] paddr,          // APB address to selected peripheral
    
    //--------------------------------------------------------------------------
    // AHB INTERFACE OUTPUT
    //--------------------------------------------------------------------------
    output reg        Hreadyout       // Ready signal back to AHB master
                                     // 0=transfer in progress, 1=transfer complete
);

//==============================================================================
// FSM STATE DEFINITIONS
//==============================================================================
// Following ARM AMBA AHB-APB Bridge specification exactly
// State encoding uses 3 bits to support 8 unique states
parameter ST_IDLE     = 3'b000;    // Idle state - waiting for valid AHB transfer
parameter ST_READ     = 3'b001;    // Read setup phase - preparing APB read
parameter ST_WWAIT    = 3'b010;    // Write wait state - waiting for write data
parameter ST_WRITE    = 3'b011;    // Write setup phase - preparing APB write
parameter ST_WRITEP   = 3'b100;    // Write setup with pipeline - handling pipelined write
parameter ST_RENABLE  = 3'b101;    // Read enable phase - APB read data transfer
parameter ST_WENABLE  = 3'b110;    // Write enable phase - APB write data transfer
parameter ST_WENABLEP = 3'b111;    // Write enable with pipeline - pipelined write transfer

//==============================================================================
// INTERNAL REGISTERS
//==============================================================================
// FSM state registers
reg [2:0] state, next_state;       // Current and next FSM states

// Temporary registers to hold APB signals before output
// These allow for proper timing control and register inference
reg [31:0] paddr_temp;             // Temporary storage for APB address
reg [31:0] pwdata_temp;            // Temporary storage for APB write data  
reg [2:0]  pselx_temp;             // Temporary storage for peripheral select
reg        penable_temp;           // Temporary storage for APB enable
reg        pwrite_temp;            // Temporary storage for APB write control
reg        Hreadyout_temp;         // Temporary storage for AHB ready signal

//==============================================================================
// FSM PRESENT STATE LOGIC
//==============================================================================
// Sequential logic to update current state on clock edge
// Synchronous reset to idle state ensures clean startup
always @(posedge Hclk) begin
    if (!Hresetn) begin
        state <= ST_IDLE;             // Reset to idle state
    end
    else begin
        state <= next_state;          // Update to next state
    end
end

//==============================================================================
// FSM NEXT STATE LOGIC (COMBINATIONAL)
//==============================================================================
// Determines next state based on current state and input conditions
// This implements the main control flow of the AHB-to-APB bridge
always @(*) begin
    case (state)   
        //----------------------------------------------------------------------
        ST_IDLE: begin
            if ((valid == 1'b1) && (Hwrite == 1'b1)) begin
                next_state = ST_WWAIT;
            end
            else if ((valid == 1'b1) && (Hwrite == 1'b0)) begin
                next_state = ST_READ;
            end
            else begin
                next_state = ST_IDLE;
            end
        end
        
        //----------------------------------------------------------------------
        ST_WWAIT: begin
            if (valid == 1'b1) begin
                next_state = ST_WRITEP;
            end
            else begin
                next_state = ST_WRITE;
            end
        end
        
        //----------------------------------------------------------------------
        ST_WRITE: begin
            // CRITICAL FIX: Always go to enable state for proper APB protocol
            next_state = ST_WENABLE;  // Remove the conditional logic here
        end
        
        //----------------------------------------------------------------------
        ST_WENABLE: begin
            // Complete write operation, then check for next transfer
            if ((valid == 1'b1) && (Hwrite == 1'b1)) begin
                next_state = ST_WWAIT;
            end
            else if ((valid == 1'b1) && (Hwrite == 1'b0)) begin
                next_state = ST_READ;
            end
            else begin
                next_state = ST_IDLE;
            end
        end
        
        //----------------------------------------------------------------------
        ST_READ: begin
            // CRITICAL FIX: Always go to enable state for proper APB protocol  
            next_state = ST_RENABLE;  // Remove conditional logic here
        end
        
        //----------------------------------------------------------------------
        ST_RENABLE: begin
            // Complete read operation, then check for next transfer
            if ((valid == 1'b1) && (Hwrite == 1'b0)) begin
                next_state = ST_READ;
            end
            else if ((valid == 1'b1) && (Hwrite == 1'b1)) begin
                next_state = ST_WWAIT;
            end
            else begin
                next_state = ST_IDLE;
            end
        end
        
        //----------------------------------------------------------------------
        ST_WRITEP: begin
            next_state = ST_WENABLEP;
        end
        
        //----------------------------------------------------------------------
        ST_WENABLEP: begin
            if ((valid == 1'b1) && (Hwritereg == 1'b1)) begin
                next_state = ST_WRITEP;
            end
            else if ((valid == 1'b0) && (Hwritereg == 1'b1)) begin
                next_state = ST_WRITE;
            end
            else if ((valid == 1'b1) && (Hwritereg == 1'b0)) begin
                next_state = ST_READ;
            end
            else begin
                next_state = ST_IDLE;
            end
        end
        
        //----------------------------------------------------------------------
        default: begin
            next_state = ST_IDLE;
        end
    endcase
end

//==============================================================================
// CORRECTED APB CONTROL SIGNAL GENERATION
//==============================================================================
// The key fix is to ensure penable is properly set in enable states

always @(posedge Hclk) begin
    if (!Hresetn) begin
        paddr_temp     <= 32'h0;
        pwdata_temp    <= 32'h0;
        pselx_temp     <= 3'b000;
        penable_temp   <= 1'b0;
        pwrite_temp    <= 1'b0;
        Hreadyout_temp <= 1'b1;
    end
    else begin
        case (state)
            ST_IDLE: begin
                if ((valid == 1'b1) && (Hwrite == 1'b1)) begin  
                    pselx_temp     <= 3'b000;
                    penable_temp   <= 1'b0;
                    Hreadyout_temp <= 1'b1;
                end
                else if ((valid == 1'b1) && (Hwrite == 1'b0)) begin  
                    paddr_temp     <= Haddr;
                    pwrite_temp    <= 1'b0;
                    pselx_temp     <= tempselx;
                    Hreadyout_temp <= 1'b0;
                    penable_temp   <= 1'b0;       // Setup phase
                end
                else begin
                    pselx_temp     <= 3'b000;
                    Hreadyout_temp <= 1'b1;
                    penable_temp   <= 1'b0;
                end
            end
            
            ST_WWAIT: begin
                paddr_temp     <= Haddr1;
                pwrite_temp    <= 1'b1;
                pselx_temp     <= tempselx;
                Hreadyout_temp <= 1'b0;
                pwdata_temp    <= Hwdata;
                penable_temp   <= 1'b0;           // Setup phase
            end
            
            ST_READ: begin 
                Hreadyout_temp <= 1'b0;
                penable_temp   <= 1'b0;           // Setup phase
            end
            
            ST_RENABLE: begin
                // CRITICAL FIX: This is enable phase - set penable=1
                penable_temp <= 1'b1;             // Enable phase!
                Hreadyout_temp <= 1'b1;           // Complete transfer
            end
            
            ST_WRITE: begin
                paddr_temp     <= Haddr1;
                pwdata_temp    <= Hwdata1;
                pwrite_temp    <= 1'b1;
                pselx_temp     <= tempselx;
                penable_temp   <= 1'b0;           // Setup phase
                Hreadyout_temp <= 1'b0;
            end
            
            ST_WENABLE: begin
                // CRITICAL FIX: This is enable phase - set penable=1
                penable_temp   <= 1'b1;           // Enable phase!
                Hreadyout_temp <= 1'b1;           // Complete transfer
            end
            
            ST_WRITEP: begin
                paddr_temp     <= Haddr2;
                pwdata_temp    <= Hwdata2;
                pwrite_temp    <= 1'b1;
                pselx_temp     <= tempselx;
                penable_temp   <= 1'b0;           // Setup phase
                Hreadyout_temp <= 1'b0;
            end
            
            ST_WENABLEP: begin
                penable_temp <= 1'b1;             // Enable phase
                
                if ((valid == 1'b1) && (Hwritereg == 1'b1)) begin
                    Hreadyout_temp <= 1'b0;
                end
                else begin
                    Hreadyout_temp <= 1'b1;
                end
            end
        endcase
    end
end

//==============================================================================
// APB OUTPUT REGISTER STAGE
//==============================================================================
// Final output stage - registers all APB signals for clean timing
// This ensures all APB outputs change synchronously and meet setup/hold times
always @(posedge Hclk) begin
    if (!Hresetn) begin
        // Reset all APB outputs to safe default values
        penable    <= 1'b0;        // APB disabled
        pselx      <= 3'b000;      // No peripheral selected  
        Hreadyout  <= 1'b1;        // AHB ready (no transfer)
        pwrite     <= 1'b0;        // Default to read mode
        paddr      <= 32'h0;       // Clear address
        pwdata     <= 32'h0;       // Clear write data
    end
    else begin
        // Transfer temporary values to actual outputs
        pwrite     <= pwrite_temp;     // APB write control
        penable    <= penable_temp;    // APB enable signal
        pselx      <= pselx_temp;      // Peripheral select
        pwdata     <= pwdata_temp;     // APB write data
        paddr      <= paddr_temp;      // APB address
        Hreadyout  <= Hreadyout_temp;  // AHB ready signal
    end
end

endmodule