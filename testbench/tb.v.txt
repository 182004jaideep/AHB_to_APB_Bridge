// =============================================================================
// Testbench Module
// =============================================================================
// Top-level testbench that instantiates and connects all components:
// AHB Master, AHB-APB Bridge, and APB Interface for comprehensive testing
// =============================================================================

`timescale 1ns / 1ps

module tb();
    // Clock and Reset
    reg hclk, hresetn;
    
    // AHB Interface Signals
    wire [31:0] haddr, hwdata, hrdata;     // AHB address, write data, read data
    wire [1:0] hresp, htrans;              // AHB response, transfer type
    wire hreadyout, hwrite, hreadyin;      // AHB ready and write control
    
    // APB Interface Signals
    wire [31:0] paddr, pwdata, prdata;     // APB address, write data, read data
    wire [31:0] pwdata_out, paddr_out;     // APB interface outputs
    wire [2:0] pselx, psel_out;            // APB peripheral select signals
    wire penable, pwrite, pwrite_out, penable_out; // APB control signals
    
    // =============================================================================
    // AHB Master Instance
    // =============================================================================
    // Generates AHB transactions for testing the bridge functionality
    // =============================================================================
    AHB_M ahb (
        .hclk(hclk),
        .hresetn(hresetn),
        .hreadyout(hreadyout),
        .hrdata(hrdata),
        .haddr(haddr),
        .hwdata(hwdata),
        .hwrite(hwrite),
        .hreadyin(hreadyin),
        .htrans(htrans)
    );
    
    // =============================================================================
    // AHB-APB Bridge Instance
    // =============================================================================
    // Main bridge under test - converts AHB transactions to APB protocol
    // =============================================================================
    Bridge_top bridge (
        .Hclk(hclk),
        .Hresetn(hresetn),
        .Hwrite(hwrite),
        .Hreadyin(hreadyin),
        .Htrans(htrans),
        .Haddr(haddr),
        .Hwdata(hwdata),
        .Prdata(prdata),
        .Pwrite(pwrite),
        .Penable(penable),
        .Hreadyout(hreadyout),
        .Pselx(pselx),
        .Pwdata(pwdata),
        .Paddr(paddr),
        .Hrdata(hrdata),
        .Hresp(hresp)
    );
    
    // =============================================================================
    // APB Interface Instance
    // =============================================================================
    // Simulates APB peripherals, providing read data and signal pass-through
    // =============================================================================
    APB_interface apb (
        .pwrite(pwrite),
        .penable(penable),
        .pselx(pselx),
        .paddr(paddr),
        .pwdata(pwdata),
        .pwrite_out(pwrite_out),
        .penable_out(penable_out),
        .psel_out(psel_out),
        .paddr_out(paddr_out),
        .pwdata_out(pwdata_out),
        .prdata(prdata)
    );
    
    // =============================================================================
    // Clock Generation Process
    // =============================================================================
    // Generates a 50MHz clock (20ns period) for system timing
    // =============================================================================
    initial begin
        hclk = 1'b0;
        forever #10 hclk = ~hclk;          // 10ns half-period = 20ns period
    end
    
    // =============================================================================
    // Reset Task
    // =============================================================================
    // Provides proper reset sequence for system initialization
    // =============================================================================
    task reset();
        begin
            @(negedge hclk);               // Align with clock edge
            hresetn = 1'b0;                // Assert reset
            @(negedge hclk);               // Hold for one clock cycle
            hresetn = 1'b1;                // Release reset
        end
    endtask    
    
    // =============================================================================
    // Main Test Sequence
    // =============================================================================
    // Executes comprehensive test scenarios to verify bridge functionality
    // =============================================================================
    initial begin
        // Initialize system with reset
        reset();
        
        // Wait for reset to complete and system to stabilize
        #40;
        
        // Test 1: Single Write Transaction
        $display("Starting single write test...");
        ahb.single_write();
        #100;                              // Allow transaction to complete
        
        // Test 2: Single Read Transaction
        $display("Starting single read test...");
        ahb.single_read();
        #100;                              // Allow transaction to complete
        
        // Test 3: Burst Write Transaction
        $display("Starting burst write test...");
        ahb.burst_write();
        #200;                              // Allow burst to complete
        
        $display("All tests completed!");
        $finish;                           // End simulation
    end
    
    // =============================================================================
    // Signal Monitoring Process
    // =============================================================================
    // Provides real-time monitoring of key bridge signals for debugging
    // =============================================================================
    initial begin
        $monitor("Time=%0t | Valid=%b | State=%b | PSEL=%b | PENABLE=%b | PWRITE=%b | PADDR=%h | PWDATA=%h | PRDATA=%h", 
                 $time, bridge.valid, bridge.apb_c.state, pselx, penable, pwrite, paddr, pwdata, prdata);
    end

endmodule